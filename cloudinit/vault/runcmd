#!/usr/bin/env bash
set -euo pipefail
SCRIPT_DIR=$(cd $(dirname $0) && pwd)

pushd ${SCRIPT_DIR}

# args
OPTIONS=(domain acme ldap oidc clientsecret subnet)

help_this="initialize vault server"
help_domain="parent domain of this environment"
help_acme="acme directory url to acquire TLS cert"
help_ldap="url of LDAP host"
help_oidc="oidc discovery url of keycloak host"
help_clientsecret="file path to oidc client secret"
help_subnet="CIDR range allowed to use the ssh-host approle to request ssh certificate"

../base/runcmd

source /usr/local/include/argshelper
parseargs $@
requireargs domain acme ldap oidc clientsecret subnet

export hostname=$(hostname | cut -d'.' -f1)

# ldap dc components from $domain
export suffix=$(sed -e 's/\./ /g' <<< ${domain} | xargs printf ",dc=%s" | sed -e 's/^,//')

# packages
if [[ ! -f /usr/share/keyrings/hashicorp-archive-keyring.gpg ]]
then
  wget --progress=dot:giga -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
fi
echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
apt-get update && apt-get install -y vault=1.15.6-1 gpg

# user
if ! id -u vault
then
  adduser --system vault --homedir /opt/vault
  addgroup vault
  adduser vault vault
fi

# conf
sed -e "s/\${hostname}/${hostname}/g" -e "s/\${domain}/${domain}/g" conf/vault.hcl > /etc/vault.d/vault.hcl
chown vault:vault /etc/vault.d/vault.hcl

cat > /usr/local/include/vault.env << EOF
export VAULT_ADDR=https://${hostname}.${domain}:8200
EOF
source /usr/local/include/vault.env

cp scripts/* /usr/local/bin/

# setup
initcertbot --acme $acme --group vault --san ${hostname}.${domain} \
  --fullchain /opt/vault/tls/tls.crt --key /opt/vault/tls/tls.key

swapoff -a

chown -R vault:vault /opt/vault
systemctl enable vault
systemctl start vault
systemctl is-active vault --wait

while ! curl -SsL https://${hostname}.${domain}:8200/v1/sys/health # sealed vault returns status 501
do
  echo waiting for vault
  sleep 2
done

VAULT_STATUS=$(vault status -format json) || true
if [[ "$(jq -r .initialized <<< ${VAULT_STATUS})" != "true" ]]
then
  vault operator init -key-shares=1 -key-threshold=1 -non-interactive -format json > /root/vaultinit.json
fi
export VAULT_TOKEN=$(jq -r .root_token /root/vaultinit.json)
if [[ "$(jq -r .sealed <<< ${VAULT_STATUS})" == "true" ]]
then
  vault operator unseal -non-interactive $(jq -r .unseal_keys_hex[0] /root/vaultinit.json)
fi

vault policy write infrastructure-user - <<EOF
path "infrastructure/*" {
  capabilities = ["create", "read", "update", "patch", "delete", "list"]
}
EOF

vault policy write kv-user - <<EOF
path "kv/*" {
  capabilities = ["create", "read", "update", "patch", "delete", "list"]
}
EOF

vault policy write vault-admin -<<EOF
path "*" {
  capabilities = ["create","read","update","patch","delete","list","sudo"]
}
EOF

vault policy write ssh-ops -<<EOF
path "ssh-client-signer/roles/*" {
 capabilities = ["list"]
}
path "ssh-client-signer/sign/ssh-role" {
 capabilities = ["create","update"]
}
EOF

vault policy write dns-ops -<<EOF
path "ssh-client-signer/roles/*" {
 capabilities = ["list"]
}
path "ssh-client-signer/sign/dns-role" {
 capabilities = ["create","update"]
}
EOF

vault auth enable oidc
vault auth enable ldap
vault auth enable approle
vault secrets enable kv #! default for vault users
vault secrets enable -path=infrastructure kv #! restricted plugin for admins
vault secrets enable -path ssh-client-signer ssh
vault secrets enable -path ssh-host-signer ssh
vault write ssh-client-signer/config/ca generate_signing_key=true
vault write ssh-host-signer/config/ca generate_signing_key=true

vault write ssh-host-signer/roles/hostrole \
  key_type=ca \
  algorithm_signer=rsa-sha2-256 \
  ttl=87600h \
  allow_host_certificates=true \
  allowed_domains="${domain}" \
  allow_subdomains=true

vault write ssh-client-signer/roles/ssh-role -<<EOF
{
  "algorithm_signer": "rsa-sha2-256",
  "allow_user_certificates": true,
  "allowed_users": "ops",
  "allowed_users_template": true,
  "allowed_extensions": "permit-pty",
  "default_extensions": { "permit-pty": "" },
  "key_type": "ca",
  "default_user": "ops",
  "ttl": "30m0s"
}
EOF

vault write ssh-client-signer/roles/dns-role -<<EOF
{
  "algorithm_signer": "rsa-sha2-256",
  "allow_user_certificates": true,
  "allowed_users": "dns-ops",
  "allowed_users_template": true,
  "allowed_extensions": "permit-pty",
  "default_extensions": { "permit-pty": "" },
  "key_type": "ca",
  "default_user": "dns-ops",
  "ttl": "30m0s"
}
EOF

VAULT_CLIENT_SECRET=$(cat $clientsecret)
vault write auth/oidc/config \
         oidc_discovery_url="${oidc}" \
         oidc_client_id="vault" \
         oidc_client_secret="$VAULT_CLIENT_SECRET" \
         default_role="vault-user"

vault write ssh-client-signer/roles/ssh-role -<<EOR
  {
    "algorithm_signer": "rsa-sha2-256",
    "allow_user_certificates": true,
    "allowed_users": "ops,{{identity.entity.aliases.$(vault auth list -format=json | jq -r '.["oidc/"].accessor').name}}",
    "allowed_users_template": true,
    "allowed_extensions": "permit-pty",
    "default_extensions": { "permit-pty": "" },
    "key_type": "ca",
    "default_user": "ops",
    "ttl": "30m0s"
  }
EOR

vault write auth/oidc/role/vault-admin -<<EOF
{
  "bound_audiences": "vault",
  "allowed_redirect_uris": [
    "https://${hostname}.${domain}:8200/ui/vault/auth/oidc/oidc/callback",
    "https://${hostname}.${domain}:8250/oidc/callback",
    "http://localhost:8250/oidc/callback"
  ],
  "user_claim": "preferred_username",
  "token_policies": [ "vault-admin", "infrastructure-user", "kv-user" ],
  "bound_claims": {
    "groups": [
      "vault-admin"
    ]
  }
}
EOF

vault write auth/oidc/role/vault-user -<<EOF
{
  "bound_audiences": "vault",
  "allowed_redirect_uris": [
    "https://${hostname}.${domain}:8200/ui/vault/auth/oidc/oidc/callback",
    "https://${hostname}.${domain}:8250/oidc/callback",
    "http://localhost:8250/oidc/callback"
  ],
  "user_claim": "preferred_username",
  "token_policies": "kv-user",
  "bound_claims": {
    "groups": [
      "vault-user"
    ]
  }
}
EOF

vault write auth/oidc/role/ssh-ops -<<EOF
{
  "bound_audiences": "vault",
  "allowed_redirect_uris": [
    "https://${hostname}.${domain}:8200/ui/vault/auth/oidc/oidc/callback",
    "https://${hostname}.${domain}:8250/oidc/callback",
    "http://localhost:8250/oidc/callback"
  ],
  "user_claim": "preferred_username",
  "token_policies": [
    "ssh-ops"
  ],
  "bound_claims": {
    "groups": [
      "ssh-ops"
    ]
  }
}
EOF

vault write auth/oidc/role/dns-ops -<<EOF
{
  "bound_audiences": "vault",
  "allowed_redirect_uris": [
    "https://${hostname}.${domain}:8200/ui/vault/auth/oidc/oidc/callback",
    "https://${hostname}.${domain}:8250/oidc/callback",
    "http://localhost:8250/oidc/callback"
  ],
  "user_claim": "preferred_username",
  "token_policies": [
    "dns-ops"
  ],
  "bound_claims": {
    "groups": [
      "dns-ops"
    ]
  }
}
EOF

vault write auth/ldap/config \
  url=${ldap} \
  userdn="ou=People,${suffix}" \
  userattr=uid \
  discoverdn=true \
  anonymous_group_search=true \
  groupdn="ou=Groups,${suffix}" \
  groupattr=cn \
  groupfilter="(member={{.UserDN}})"
vault write auth/ldap/groups/vault-admin policies=vault-admin policies=kv-user policies=infrastructure-user
vault write auth/ldap/groups/vault-user policies=kv-user
vault write auth/ldap/groups/ssh-ops policies=ssh-ops
vault write auth/ldap/groups/dns-ops policies=dns-ops

add-app-role.sh --app ssh-host --owner ssh-ops --subnet ${subnet} --policy - << EOF
path "ssh-host-signer/roles/*" {
 capabilities = ["list"]
}
path "ssh-host-signer/sign/hostrole" {
 capabilities = ["create","update"]
}
EOF