#@ load("@ytt:data", "data")
#@ load("@ytt:overlay", "overlay")
#@overlay/match by=overlay.all,expects="0+"
#@overlay/match-child-defaults missing_ok=True
---
groups:
- vault
users:
- name: vault
  primary_group: vault
  system: true
  home: /opt/vault
  shell: /bin/false
  sudo: False
write_files:
- path: /run/vault.hcl
  owner: root:root
  permissions: '0644'
  #@yaml/text-templated-strings
  content: |
    ui = true
    api_addr = "(@= data.values.hostname @).(@= data.values.zone @):8200"

    disable_mlock = true

    storage "file" {
      path = "/opt/vault/data"
    }

    # HTTPS listener
    listener "tcp" {
      address       = "0.0.0.0:8200"
      tls_cert_file = "/opt/vault/tls/tls.crt"
      tls_key_file  = "/opt/vault/tls/tls.key"
    }
- path: /usr/local/bin/rotate-root-token
  owner: root:root
  permissions: '0755'
  #@yaml/text-templated-strings
  content: |
    #!/usr/bin/env bash
    set -euo pipefail

    echo "enter unseal key:"
    read -s VAULT_UNSEAL_KEY
    echo "enter root token:"
    read -s VAULT_TOKEN

    export VAULT_ADDR=https://(@= data.values.hostname @).(@= data.values.zone @):8200

    VAULT_ROTATE=$(vault operator generate-root -init -format json)
    VAULT_NONCE=$(jq -r .nonce <<< $VAULT_ROTATE)
    VAULT_OTP=$(jq -r .otp <<< $VAULT_ROTATE)
    VAULT_ENCRYPTED_TOKEN=$(vault operator generate-root -format json -nonce=$VAULT_NONCE $VAULT_UNSEAL_KEY | jq -r .encoded_token)

    echo -e "Save the token below. It will not be displayed again:\n\n $(vault operator generate-root -format json -nonce=$VAULT_NONCE -otp $VAULT_OTP -decode=$VAULT_ENCRYPTED_TOKEN | jq -r .token)" | less

    echo 'Revoke current token? [Y/n]'
    read REVOKE

    if [[ "$REVOKE" == "Y" ]]
    then
      vault token revoke $VAULT_TOKEN
    fi
- path: /usr/local/bin/rotate-unseal-key
  owner: root:root
  permissions: '0755'
  #@yaml/text-templated-strings
  content: |
    #!/usr/bin/env bash
    set -euo pipefail

    echo "enter unseal key:"
    read -s VAULT_UNSEAL_KEY
    echo "enter root token:"
    read -s VAULT_TOKEN

    export VAULT_ADDR=https://(@= data.values.hostname @).(@= data.values.zone @):8200

    VAULT_ROTATE=$(vault operator rekey -init -format json -key-shares=1 -key-threshold=1)
    VAULT_NONCE=$(jq -r .nonce <<< $VAULT_ROTATE)

    NEW_VAULT_KEY=$(vault operator rekey -format json -nonce $VAULT_NONCE $VAULT_UNSEAL_KEY | jq -r .keys[0])

    echo -e "Save the key below. It will not be displayed again:\n\n $NEW_VAULT_KEY" | less
packages:
- gpg
- jq
runcmd:
- swapoff -a
- wget --progress=dot:giga -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
- echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
- apt-get update && apt-get install -y vault
- chown -R vault /opt/vault/data
- chown -R vault /opt/vault/tls
- cp /run/vault.hcl /etc/vault.d/vault.hcl
- chown vault:vault /etc/vault.d/vault.hcl
- chown -R vault:vault /opt/vault
- systemctl enable vault
- systemctl start vault
- systemctl is-active vault --wait
#@yaml/text-templated-strings
- export VAULT_ADDR=https://(@= data.values.hostname @).(@= data.values.zone @):8200
- vault operator init -key-shares=1 -key-threshold=1 -non-interactive -format json > /root/vaultinit.json
- export VAULT_TOKEN=$(jq -r .root_token /root/vaultinit.json)
- vault operator unseal -non-interactive $(jq -r .unseal_keys_hex[0] /root/vaultinit.json)
- |
  vault policy write infrastructure-user - <<EOF
  path "infrastructure/*" {
    capabilities = ["create", "read", "update", "patch", "delete", "list"]
  }
  EOF
- |
  vault policy write kv-user - <<EOF
  path "kv/*" {
    capabilities = ["create", "read", "update", "patch", "delete", "list"]
  }
  EOF
- |
  vault policy write vault-admin -<<EOF
  path "*" {
    capabilities = ["create","read","update","patch","delete","list","sudo"]
  }
  EOF
- |
  vault policy write ssh-ops -<<EOF
  path "ssh-client-signer/roles/*" {
   capabilities = ["list"]
  }
  path "ssh-client-signer/sign/ssh-role" {
   capabilities = ["create","update"]
  }
  EOF
- |
  vault policy write ssh-host -<<EOF
  path "ssh-host-signer/roles/*" {
   capabilities = ["list"]
  }
  path "ssh-host-signer/sign/hostrole" {
   capabilities = ["create","update"]
  }
  EOF
- |
  vault policy write approle-secret-id -<<EOF
  path "auth/approle/role/+/secret-id" {
    capabilities = ["create", "update"]
  }
  path "auth/approle/role/+/role-id" {
    capabilities = ["read"]
  }
  EOF
- vault auth enable oidc
- vault auth enable ldap
- vault auth enable approle
- vault secrets enable kv #! default for vault users
- vault secrets enable -path=infrastructure kv #! restricted plugin for admins
- vault secrets enable -path ssh-client-signer ssh
- vault secrets enable -path ssh-host-signer ssh
- vault write ssh-client-signer/config/ca generate_signing_key=true
- vault write ssh-host-signer/config/ca generate_signing_key=true
#@yaml/text-templated-strings
- |
  vault write ssh-host-signer/roles/hostrole \
    key_type=ca \
    algorithm_signer=rsa-sha2-256 \
    ttl=87600h \
    allow_host_certificates=true \
    allowed_domains="(@= data.values.zone @)" \
    allow_subdomains=true
- |
  vault write ssh-client-signer/roles/ssh-role -<<EOF
  {
    "algorithm_signer": "rsa-sha2-256",
    "allow_user_certificates": true,
    "allowed_users": "ops",
    "allowed_users_template": true,
    "allowed_extensions": "permit-pty",
    "default_extensions": { "permit-pty": "" },
    "key_type": "ca",
    "default_user": "ops",
    "ttl": "30m0s"
  }
  EOF
- |
  vault write auth/approle/role/ssh-host-role \
    secret_id_ttl=10m \
    token_num_uses=10 \
    token_ttl=20m \
    token_max_ttl=30m \
    secret_id_num_uses=1 \
    secret_id_bound_cidrs=192.168.2.0/23 \
    token_bound_cidrs=192.168.2.0/23 \
    bind_secret_id=false \
    token_policies=ssh-host
#@yaml/text-templated-strings
- |
  vault write auth/oidc/role/vault-admin -<<EOF
  {
    "bound_audiences": "vault",
    "allowed_redirect_uris": [
      "https://(@= data.values.hostname @).(@= data.values.zone @):8200/ui/vault/auth/oidc/oidc/callback",
      "https://(@= data.values.hostname @).(@= data.values.zone @):8250/oidc/callback",
      "http://localhost:8250/oidc/callback"
    ],
    "user_claim": "preferred_username",
    "token_policies": [ "vault-admin", "infrastructure-user", "kv-user" ],
    "bound_claims": {
      "groups": [
        "vault-admin"
      ]
    }
  }
  EOF
#@yaml/text-templated-strings
- |
  vault write auth/oidc/role/vault-user -<<EOF
  {
    "bound_audiences": "vault",
    "allowed_redirect_uris": [
      "https://(@= data.values.hostname @).(@= data.values.zone @):8200/ui/vault/auth/oidc/oidc/callback",
      "https://(@= data.values.hostname @).(@= data.values.zone @):8250/oidc/callback",
      "http://localhost:8250/oidc/callback"
    ],
    "user_claim": "preferred_username",
    "token_policies": "kv-user",
    "bound_claims": {
      "groups": [
        "vault-user"
      ]
    }
  }
  EOF
#@yaml/text-templated-strings
- |
  vault write auth/oidc/role/ssh-ops -<<EOF
  {
    "bound_audiences": "vault",
    "allowed_redirect_uris": [
      "https://(@= data.values.hostname @).(@= data.values.zone @):8200/ui/vault/auth/oidc/oidc/callback",
      "https://(@= data.values.hostname @).(@= data.values.zone @):8250/oidc/callback",
      "http://localhost:8250/oidc/callback"
    ],
    "user_claim": "preferred_username",
    "token_policies": [
      "ssh-ops",
      "approle-secret-id"
    ],
    "bound_claims": {
      "groups": [
        "ssh-ops"
      ]
    }
  }
  EOF
#@yaml/text-templated-strings
- |
  vault write auth/ldap/config \
    url=ldaps://ldap.(@= data.values.zone @) \
    userdn="ou=People,(@= data.values.suffix @)" \
    userattr=uid \
    discoverdn=true \
    anonymous_group_search=true \
    groupdn="ou=Groups,(@= data.values.suffix @)" \
    groupattr=cn \
    groupfilter="(member={{.UserDN}})"
- vault write auth/ldap/groups/vault-admin policies=vault-admin policies=kv-user policies=infrastructure-user
- vault write auth/ldap/groups/vault-user policies=kv-user
- vault write auth/ldap/groups/ssh-ops policies=ssh-ops policies=approle-secret-id