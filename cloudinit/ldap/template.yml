#@ load("@ytt:data", "data")
#@ load("@ytt:overlay", "overlay")
#@overlay/match by=overlay.all,expects="0+"
#@overlay/match-child-defaults missing_ok=True
---
write_files:
- path: /etc/ldap/ldap.conf
  owner: root:root
  permissions: '0644'
  #@yaml/text-templated-strings
  content: |
    #
    # LDAP Defaults
    #

    # See ldap.conf(5) for details
    # This file should be world readable but not world writable.
    BASE (@= data.values.suffix @)
    URI ldap://(@= data.values.hostname @).(@= data.values.zone @)

    #SIZELIMIT      12
    #TIMELIMIT      15
    #DEREF          never

    # TLS certificates (needed for GnuTLS)
    TLS_CACERT      /etc/ssl/certs/ca-certificates.crt
- path: /etc/default/slapd
  owner: root:root
  permissions: '0644'
  #@yaml/text-templated-strings
  content: |
    # Default location of the slapd.conf file or slapd.d cn=config directory. If
    # empty, use the compiled-in default (/etc/ldap/slapd.d with a fallback to
    # /etc/ldap/slapd.conf).
    SLAPD_CONF=

    # System account to run the slapd server under. If empty the server
    # will run as root.
    SLAPD_USER="openldap"

    # System group to run the slapd server under. If empty the server will
    # run in the primary group of its user.
    SLAPD_GROUP="openldap"

    # Path to the pid file of the slapd server. If not set the init.d script
    # will try to figure it out from $SLAPD_CONF (/etc/ldap/slapd.d by
    # default)
    SLAPD_PIDFILE=

    # slapd normally serves ldap only on all TCP-ports 389. slapd can also
    # service requests on TCP-port 636 (ldaps) and requests via unix
    # sockets.
    # Example usage:
    # SLAPD_SERVICES="ldap://127.0.0.1:389/ ldaps:/// ldapi:///"
    SLAPD_SERVICES="ldap:/// ldapi:/// ldaps:///"

    # If SLAPD_NO_START is set, the init script will not start or restart
    # slapd (but stop will still work).  Uncomment this if you are
    # starting slapd via some other means or if you don't want slapd normally
    # started at boot.
    #SLAPD_NO_START=1

    # If SLAPD_SENTINEL_FILE is set to path to a file and that file exists,
    # the init script will not start or restart slapd (but stop will still
    # work).  Use this for temporarily disabling startup of slapd (when doing
    # maintenance, for example, or through a configuration management system)
    # when you don't want to edit a configuration file.
    SLAPD_SENTINEL_FILE=/etc/ldap/noslapd

    # For Kerberos authentication (via SASL), slapd by default uses the system
    # keytab file (/etc/krb5.keytab).  To use a different keytab file,
    # uncomment this line and change the path.
    #export KRB5_KTNAME=/etc/krb5.keytab

    # Additional options to pass to slapd
    SLAPD_OPTIONS=""
- path: /etc/sssd/sssd.conf
  owner: root:root
  permissions: '0600'
  #@yaml/text-templated-strings
  content: |
    [sssd]
    config_file_version = 2
    domains = (@= data.values.hostname @).(@= data.values.zone @)

    [domain/(@= data.values.hostname @).(@= data.values.zone @)]
    id_provider = ldap
    auth_provider = ldap
    ldap_uri = ldap://(@= data.values.hostname @).(@= data.values.zone @)
    cache_credentials = True
    ldap_search_base = (@= data.values.suffix @)
- path: /run/certinfo.ldif
  owner: root:root
  permissions: '0600'
  #@yaml/text-templated-strings
  content: |
    dn: cn=config
    add: olcTLSCACertificateFile
    olcTLSCACertificateFile: /etc/ldap/ca.pem
    -
    add: olcTLSCertificateFile
    olcTLSCertificateFile: /etc/ldap/cert.pem
    -
    add: olcTLSCertificateKeyFile
    olcTLSCertificateKeyFile: /etc/ldap/key.pem
- path: /run/org.ldif
  owner: root:root
  permissions: '0600'
  #@yaml/text-templated-strings
  content: |
    dn: ou=People,(@= data.values.suffix @)
    objectClass: organizationalUnit
    ou: People

    dn: ou=Groups,(@= data.values.suffix @)
    objectClass: organizationalUnit
    ou: Groups

    dn: ou=Systems,(@= data.values.suffix @)
    objectClass: organizationalUnit
    ou: Systems
- path: /usr/local/bin/addldapgroup
  owner: root:root
  permissions: '0755'
  #@yaml/text-templated-strings
  content: |
    #!/usr/bin/env bash
    CN=$1
    cat << EOF > /tmp/${CN}.ldif
    dn: cn=${CN},ou=Groups,(@= data.values.suffix @)
    objectClass: groupOfNames
    cn: ${CN}
    member: uid=dummy,(@= data.values.suffix @)
    EOF
    if [ $UID -eq 0 ]
    then
      AUTH_ARGS="-Y EXTERNAL"
    else
      AUTH_ARGS="-W  -x -D cn=admin,(@= data.values.suffix @)"
    fi
    ldapadd -H ldapi:/// -f /tmp/${CN}.ldif $AUTH_ARGS
- path: /usr/local/bin/addldapuser
  owner: root:root
  permissions: '0755'
  #@yaml/text-templated-strings
  content: |
    #!/usr/bin/env bash
    USER_UID=$1
    GIVEN_NAME=$2
    SURNAME=$3
    EMAIL=$4
    OU=${5:-People}
    cat << EOF > /tmp/${USER_UID}.ldif
    dn: uid=${USER_UID},ou=${OU},(@= data.values.suffix @)
    objectClass: inetOrgPerson
    uid: ${USER_UID}
    sn: $SURNAME
    givenName: $GIVEN_NAME
    cn: $GIVEN_NAME $SURNAME
    displayName: $GIVEN_NAME $SURNAME
    mail: $EMAIL
    EOF
    if [ $UID -eq 0 ]
    then
      AUTH_ARGS="-Y EXTERNAL"
    else
      AUTH_ARGS="-W  -x -D cn=admin,(@= data.values.suffix @)"
    fi
    ldapadd -H ldapi:/// -f /tmp/${USER_UID}.ldif $AUTH_ARGS
- path: /usr/local/bin/addldapsystem
  owner: root:root
  permissions: '0755'
  #@yaml/text-templated-strings
  content: |
    #!/usr/bin/env bash
    USER_UID=$1
    CN=$2
    OU=Systems
    cat << EOF > /tmp/${USER_UID}.ldif
    dn: uid=${USER_UID},ou=${OU},(@= data.values.suffix @)
    objectClass: inetOrgPerson
    uid: ${USER_UID}
    sn: ${USER_UID}
    givenName: ${USER_UID}
    cn: $CN
    displayName: $CN
    mail: ${USER_UID}@(@= data.values.zone @)
    EOF
    if [ $UID -eq 0 ]
    then
      AUTH_ARGS="-Y EXTERNAL"
    else
      AUTH_ARGS="-W  -x -D cn=admin,(@= data.values.suffix @)"
    fi
    ldapadd -H ldapi:/// -f /tmp/${USER_UID}.ldif $AUTH_ARGS
- path: /usr/local/bin/addldapusertogroup
  owner: root:root
  permissions: '0755'
  #@yaml/text-templated-strings
  content: |
    #!/usr/bin/env bash
    USER_UID=$1
    GROUP_CN=$2
    USER_DN=$(ldapsearch -x -H ldap:/// "(uid=${USER_UID})" dn | grep dn: | awk '{print $2}')
    cat << EOF > /tmp/${USER_UID}_${GROUP_CN}.ldif
    dn: cn=${GROUP_CN},ou=Groups,(@= data.values.suffix @)
    changetype: modify
    add: member
    member: $USER_DN
    EOF
    if [ $UID -eq 0 ]
    then
      AUTH_ARGS="-Y EXTERNAL"
    else
      AUTH_ARGS="-W  -x -D cn=admin,(@= data.values.suffix @)"
    fi
    ldapadd -H ldapi:/// -f /tmp/${USER_UID}_${GROUP_CN}.ldif $AUTH_ARGS
packages:
- sssd-ldap
- ldap-utils
- ldb-tools
- sssd-tools
runcmd:
#@yaml/text-templated-strings
- |
  debconf-set-selections <<EOF
    slapd slapd/internal/generated_adminpw password (@= data.values.placeholdercred @)
    slapd slapd/password2 password (@= data.values.placeholdercred @)
    slapd slapd/internal/adminpw password (@= data.values.placeholdercred @)
    slapd slapd/password1 password (@= data.values.placeholdercred @)
    slapd slapd/domain string (@= data.values.zone @)
    slapd shared/organization string homelab
  EOF
- apt install -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" --force-yes slapd
- snap install --classic certbot
- ln -s /snap/bin/certbot /usr/bin/certbot
- export REQUESTS_CA_BUNDLE=/etc/ssl/certs/ca-certificates.crt
- echo "REQUESTS_CA_BUNDLE=/etc/ssl/certs/ca-certificates.crt" | sudoappend /etc/environment
#@yaml/text-templated-strings
- certbot certonly --standalone --server (@= data.values.acme @) --register-unsafely-without-email --cert-name (@= data.values.hostname @).(@= data.values.zone @) -d (@= data.values.hostname @).(@= data.values.zone @)
#@yaml/text-templated-strings
- ln -s /etc/letsencrypt/live/(@= data.values.hostname @).(@= data.values.zone @)/chain.pem /etc/ldap/ca.pem 
#@yaml/text-templated-strings
- ln -s /etc/letsencrypt/live/(@= data.values.hostname @).(@= data.values.zone @)/cert.pem /etc/ldap/cert.pem 
#@yaml/text-templated-strings
- ln -s /etc/letsencrypt/live/(@= data.values.hostname @).(@= data.values.zone @)/privkey.pem /etc/ldap/key.pem 
- chgrp -R openldap /etc/letsencrypt
- chmod g+rx /etc/letsencrypt/archive
#@yaml/text-templated-strings
- chmod g+rx /etc/letsencrypt/archive/(@= data.values.hostname @).(@= data.values.zone @)
- chmod g+rx /etc/letsencrypt/live
#@yaml/text-templated-strings
- chmod g+rx /etc/letsencrypt/live/(@= data.values.hostname @).(@= data.values.zone @)
- chmod 640 /etc/ldap/*.pem
- ldapmodify -Y EXTERNAL -H ldapi:/// -f /run/certinfo.ldif
#@yaml/text-templated-strings
- |
  ldapmodify -Q -Y EXTERNAL -H ldapi:/// << 'EOF'
  dn: olcDatabase={1}mdb,cn=config
  changetype: modify
  add: olcAccess
  olcAccess: {2}to dn.subtree="(@= data.values.suffix @)" by dn.exact=gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth manage
  EOF
#@yaml/text-templated-strings
- hostnamectl set-hostname (@= data.values.hostname @).(@= data.values.zone @)
- systemctl restart sssd.service
- systemctl restart slapd
- ldapadd -H ldapi:/// -f /run/org.ldif -Y EXTERNAL
