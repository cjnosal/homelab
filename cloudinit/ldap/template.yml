#@ load("@ytt:data", "data")
#@ load("@ytt:overlay", "overlay")
#@overlay/match by=overlay.all,expects="0+"
#@overlay/match-child-defaults missing_ok=True
---
write_files:
- path: /run/slapd.conf
  owner: root:root
  permissions: '0644'
  #@yaml/text-templated-strings
  content: |
    # This is the main slapd configuration file. See slapd.conf(5) for more
    # info on the configuration options.

    #######################################################################
    # Global Directives:

    # Schema and objectClass definitions
    include         /etc/ldap/schema/core.schema
    include         /etc/ldap/schema/cosine.schema
    include         /etc/ldap/schema/nis.schema
    include         /etc/ldap/schema/inetorgperson.schema

    # Where the pid file is put. The init.d script
    # will not stop the server if you change this.
    pidfile         /var/run/slapd/slapd.pid

    # List of arguments that were passed to the server
    argsfile        /var/run/slapd/slapd.args

    # Read slapd.conf(5) for possible values
    loglevel        none

    # Where the dynamically loaded modules are stored
    modulepath      /usr/lib/ldap
    moduleload      back_mdb

    # The maximum number of entries that is returned for a search operation
    sizelimit 500

    # The tool-threads parameter sets the actual amount of cpu's that is used
    # for indexing.
    tool-threads 1

    #######################################################################
    # Specific Backend Directives for mdb:
    # Backend specific directives apply to this backend until another
    # 'backend' directive occurs
    backend         mdb

    #######################################################################
    # Specific Backend Directives for 'other':
    # Backend specific directives apply to this backend until another
    # 'backend' directive occurs
    #backend                <other>

    #######################################################################
    # Specific Directives for database #1, of type mdb:
    # Database specific directives apply to this databasse until another
    # 'database' directive occurs
    database        mdb

    # The base of your directory in database #1
    suffix          "(@= data.values.suffix @)"

    # rootdn directive for specifying a superuser on the database. This is needed
    # for syncrepl.
    # rootdn          "cn=admin,dc=example,dc=com"

    # Where the database file are physically stored for database #1
    directory       "/var/lib/ldap"

    # Indexing options for database #1
    index           objectClass eq

    # Save the time that the entry gets modified, for database #1
    lastmod         on

    # Checkpoint the BerkeleyDB database periodically in case of system
    # failure and to speed slapd shutdown.
    checkpoint      512 30

    # The userPassword by default can be changed
    # by the entry owning it if they are authenticated.
    # Others should not be able to see it, except the
    # admin entry below
    # These access lines apply to database #1 only
    access to attrs=userPassword,shadowLastChange
            by dn="cn=admin,(@= data.values.suffix @)" write
            by anonymous auth
            by self write
            by * none

    # Ensure read access to the base for things like
    # supportedSASLMechanisms.  Without this you may
    # have problems with SASL not knowing what
    # mechanisms are available and the like.
    # Note that this is covered by the 'access to *'
    # ACL below too but if you change that as people
    # are wont to do you'll still need this if you
    # want SASL (and possible other things) to work
    # happily.
    access to dn.base="" by * read

    # The admin dn has full write access, everyone else
    # can read everything.
    access to *
            by dn="cn=admin,(@= data.values.suffix @)" write
            by * read

    # For Netscape Roaming support, each user gets a roaming
    # profile for which they have write access to
    #access to dn=".*,ou=Roaming,o=morsnet"
    #        by dn="cn=admin,dc=example,dc=com" write
    #        by dnattr=owner write

    #######################################################################
    # Specific Directives for database #2, of type 'other' (can be mdb too):
    # Database specific directives apply to this databasse until another
    # 'database' directive occurs
    #database        <other>

    # The base of your directory for database #2
    #suffix         "dc=debian,dc=org"
- path: /etc/ldap/ldap.conf
  owner: root:root
  permissions: '0644'
  #@yaml/text-templated-strings
  content: |
    #
    # LDAP Defaults
    #

    # See ldap.conf(5) for details
    # This file should be world readable but not world writable.
    BASE (@= data.values.suffix @)
    URI ldap://(@= data.values.hostname @).(@= data.values.zone @)

    #SIZELIMIT      12
    #TIMELIMIT      15
    #DEREF          never

    # TLS certificates (needed for GnuTLS)
    TLS_CACERT      /etc/ssl/certs/ca-certificates.crt
- path: /etc/default/slapd
  owner: root:root
  permissions: '0644'
  #@yaml/text-templated-strings
  content: |
    # Default location of the slapd.conf file or slapd.d cn=config directory. If
    # empty, use the compiled-in default (/etc/ldap/slapd.d with a fallback to
    # /etc/ldap/slapd.conf).
    SLAPD_CONF=

    # System account to run the slapd server under. If empty the server
    # will run as root.
    SLAPD_USER="openldap"

    # System group to run the slapd server under. If empty the server will
    # run in the primary group of its user.
    SLAPD_GROUP="openldap"

    # Path to the pid file of the slapd server. If not set the init.d script
    # will try to figure it out from $SLAPD_CONF (/etc/ldap/slapd.d by
    # default)
    SLAPD_PIDFILE=

    # slapd normally serves ldap only on all TCP-ports 389. slapd can also
    # service requests on TCP-port 636 (ldaps) and requests via unix
    # sockets.
    # Example usage:
    # SLAPD_SERVICES="ldap://127.0.0.1:389/ ldaps:/// ldapi:///"
    SLAPD_SERVICES="ldap:/// ldapi:/// ldaps:///"

    # If SLAPD_NO_START is set, the init script will not start or restart
    # slapd (but stop will still work).  Uncomment this if you are
    # starting slapd via some other means or if you don't want slapd normally
    # started at boot.
    #SLAPD_NO_START=1

    # If SLAPD_SENTINEL_FILE is set to path to a file and that file exists,
    # the init script will not start or restart slapd (but stop will still
    # work).  Use this for temporarily disabling startup of slapd (when doing
    # maintenance, for example, or through a configuration management system)
    # when you don't want to edit a configuration file.
    SLAPD_SENTINEL_FILE=/etc/ldap/noslapd

    # For Kerberos authentication (via SASL), slapd by default uses the system
    # keytab file (/etc/krb5.keytab).  To use a different keytab file,
    # uncomment this line and change the path.
    #export KRB5_KTNAME=/etc/krb5.keytab

    # Additional options to pass to slapd
    SLAPD_OPTIONS=""
- path: /etc/sssd/sssd.conf
  owner: root:root
  permissions: '0600'
  #@yaml/text-templated-strings
  content: |
    [sssd]
    config_file_version = 2
    domains = (@= data.values.hostname @).(@= data.values.zone @)

    [domain/(@= data.values.hostname @).(@= data.values.zone @)]
    id_provider = ldap
    auth_provider = ldap
    ldap_uri = ldap://(@= data.values.hostname @).(@= data.values.zone @)
    cache_credentials = True
    ldap_search_base = (@= data.values.suffix @)
- path: /run/certinfo.ldif
  owner: root:root
  permissions: '0600'
  #@yaml/text-templated-strings
  content: |
    dn: cn=config
    add: olcTLSCACertificateFile
    olcTLSCACertificateFile: /etc/ldap/ca.pem
    -
    add: olcTLSCertificateFile
    olcTLSCertificateFile: /etc/ldap/cert.pem
    -
    add: olcTLSCertificateKeyFile
    olcTLSCertificateKeyFile: /etc/ldap/key.pem
- path: /run/user.ldif
  owner: root:root
  permissions: '0600'
  #@yaml/text-templated-strings
  content: |
    dn: ou=People,(@= data.values.suffix @)
    objectClass: organizationalUnit
    ou: People

    dn: ou=Groups,(@= data.values.suffix @)
    objectClass: organizationalUnit
    ou: Groups

    dn: cn=me,ou=Groups,(@= data.values.suffix @)
    objectClass: groupOfNames
    cn: me
    member: uid=conor,ou=People,(@= data.values.suffix @)

    dn: uid=conor,ou=People,(@= data.values.suffix @)
    objectClass: inetOrgPerson
    uid: conor
    sn: Nosal
    givenName: Conor
    cn: Conor Nosal
    displayName: Conor Nosal
    mail: c.nosal@gmail.com
packages:
- eatmydata
- sssd-ldap
- ldap-utils
- ldb-tools
- sssd-tools
runcmd:
#@yaml/text-templated-strings
- |
  debconf-set-selections <<EOF
    slapd slapd/internal/generated_adminpw password (@= data.values.placeholdercred @)
    slapd slapd/password2 password (@= data.values.placeholdercred @)
    slapd slapd/internal/adminpw password (@= data.values.placeholdercred @)
    slapd slapd/password1 password (@= data.values.placeholdercred @)
    slapd slapd/domain string (@= data.values.zone @)
    slapd shared/organization string homelab
  EOF
- apt install -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" --force-yes slapd
- snap install --classic certbot
- ln -s /snap/bin/certbot /usr/bin/certbot
- export REQUESTS_CA_BUNDLE=/etc/ssl/certs/ca-certificates.crt
- echo "REQUESTS_CA_BUNDLE=/etc/ssl/certs/ca-certificates.crt" | sudoappend /etc/environment
#@yaml/text-templated-strings
- certbot certonly --standalone --server (@= data.values.acme @) --register-unsafely-without-email --cert-name (@= data.values.hostname @).(@= data.values.zone @) -d (@= data.values.hostname @).(@= data.values.zone @)
#@yaml/text-templated-strings
- ln -s /etc/letsencrypt/live/(@= data.values.hostname @).(@= data.values.zone @)/chain.pem /etc/ldap/ca.pem 
#@yaml/text-templated-strings
- ln -s /etc/letsencrypt/live/(@= data.values.hostname @).(@= data.values.zone @)/cert.pem /etc/ldap/cert.pem 
#@yaml/text-templated-strings
- ln -s /etc/letsencrypt/live/(@= data.values.hostname @).(@= data.values.zone @)/privkey.pem /etc/ldap/key.pem 
- chgrp -R openldap /etc/letsencrypt
- chmod g+rx /etc/letsencrypt/archive
#@yaml/text-templated-strings
- chmod g+rx /etc/letsencrypt/archive/(@= data.values.hostname @).(@= data.values.zone @)
- chmod g+rx /etc/letsencrypt/live
#@yaml/text-templated-strings
- chmod g+rx /etc/letsencrypt/live/(@= data.values.hostname @).(@= data.values.zone @)
- chmod 640 /etc/ldap/*.pem
- ldapmodify -Y EXTERNAL -H ldapi:/// -f /run/certinfo.ldif
#@yaml/text-templated-strings
- hostnamectl set-hostname (@= data.values.hostname @).(@= data.values.zone @)
- systemctl start sssd.service
- slaptest -f /run/slapd.conf -F /etc/ldap/slapd.d
- systemctl restart slapd