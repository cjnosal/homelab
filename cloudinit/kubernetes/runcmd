#!/usr/bin/env bash
set -euo pipefail

SCRIPT_DIR=$(cd $(dirname $0) && pwd)

pushd ${SCRIPT_DIR}

# args
OPTIONS=(domain node version acme)

help_this="initialize kubernetes node"
help_domain="parent domain of this environment"
help_node="type of node (master|worker)"
help_version="kubernetes version (e.g. v1.28)"
help_acme="acme directory url to acquire TLS cert"

../base/runcmd

source /usr/local/include/argshelper
parseargs $@
requireargs domain node version acme

export hostname=$(hostname)

swapoff -a

DEBIAN_FRONTEND=noninteractive apt-get -y  -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install \
  gpg jq apt-transport-https ca-certificates curl

echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/${version}/deb/ /" > /etc/apt/sources.list.d/kubernetes.list
chmod 600 /etc/apt/sources.list.d/kubernetes.list

curl -fsSL https://pkgs.k8s.io/core:/stable:/${version}/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
apt-get update

DEBIAN_FRONTEND=noninteractive apt-get -y  -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install \
  containerd kubelet kubeadm kubectl

mkdir /etc/containerd
containerd config default | tee /etc/containerd/config.toml
sed -i -e 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml

# Configure persistent loading of modules
tee /etc/modules-load.d/k8s.conf <<EOF
overlay
br_netfilter
EOF

# Load at runtime
modprobe overlay
modprobe br_netfilter

# Ensure sysctl params are set
tee /etc/sysctl.d/kubernetes.conf<<EOF
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1
EOF

# Reload configs
sysctl --system

# restart containerd
systemctl enable kubelet
systemctl enable containerd


systemctl restart containerd
systemctl is-active --wait containerd


kubeadm config images pull

if [[ "$node" == "master" ]]
then
        sed -e "s/\${hostname}/${hostname}/g" -e "s/\${domain}/${domain}/g" conf/kubeadmconfig.yml > /root/kubeadmconfig.yml
        kubeadm init \
          --node-name $(hostname) \
          --skip-token-print \
          --skip-certificate-key-print \
          --config /root/kubeadmconfig.yml

        kubeadm token create --print-join-command > /root/joincmd

        sudo -u ubuntu mkdir /home/ubuntu/.kube
        cp /etc/kubernetes/admin.conf /home/ubuntu/.kube/config
        chown ubuntu:ubuntu /home/ubuntu/.kube/config

        # kapp
        curl -fSsL https://github.com/carvel-dev/kapp/releases/download/v0.60.0/kapp-linux-amd64 -o kapp
        chmod a+rx kapp
        mv kapp /usr/local/bin/

        # helm
        snap install helm --classic

        # pinniped
        wget --progress=dot:giga https://get.pinniped.dev/v0.28.0/pinniped-cli-linux-amd64
        mv pinniped-cli-linux-amd64 /usr/local/bin/pinniped
        chmod a+rx /usr/local/bin/pinniped

        # caddy
        addcaddy.sh
        sed -e "s/\${hostname}/${hostname}/g" -e "s/\${domain}/${domain}/g" -e "s|\${acme}|${acme}|g" conf/Caddyfile > /etc/caddy/Caddyfile
        systemctl restart caddy
        systemctl is-active caddy --wait
        while ! curl -SsL https://${hostname}.${domain}:8444/; do echo waiting for caddy tls; sleep 2; done

else
	/home/ubuntu/init/creds/joincmd
fi

echo done k8s setup