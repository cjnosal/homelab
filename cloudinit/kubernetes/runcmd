#!/usr/bin/env bash
set -euo pipefail

node=$1 # master/worker

K8S_VER=v1.28

swapoff -a

DEBIAN_FRONTEND=noninteractive apt-get -y  -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install \
  gpg jq apt-transport-https ca-certificates curl

echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/${K8S_VER}/deb/ /" > /etc/apt/sources.list.d/kubernetes.list
chmod 600 /etc/apt/sources.list.d/kubernetes.list

curl -fsSL https://pkgs.k8s.io/core:/stable:/${K8S_VER}/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
apt-get update

DEBIAN_FRONTEND=noninteractive apt-get -y  -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install \
  containerd kubelet kubeadm kubectl

mkdir /etc/containerd
containerd config default | tee /etc/containerd/config.toml
sed -i -e 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml

# Configure persistent loading of modules
tee /etc/modules-load.d/k8s.conf <<EOF
overlay
br_netfilter
EOF

# Load at runtime
modprobe overlay
modprobe br_netfilter

# Ensure sysctl params are set
tee /etc/sysctl.d/kubernetes.conf<<EOF
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1
EOF

# Reload configs
sysctl --system

# restart containerd
systemctl enable kubelet
systemctl enable containerd


systemctl restart containerd
systemctl is-active --wait containerd


kubeadm config images pull

if [[ "$node" == "master" ]]
then
        kubeadm init \
          --node-name $(hostname) \
          --skip-token-print \
          --skip-certificate-key-print \
          --config /root/kubeadmconfig.yml

        kubeadm token create --print-join-command > /root/joincmd

        sudo -u ubuntu mkdir /home/ubuntu/.kube
        cp /etc/kubernetes/admin.conf /home/ubuntu/.kube/config
        chown ubuntu:ubuntu /home/ubuntu/.kube/config

        # kapp
        curl -fSsL https://github.com/carvel-dev/kapp/releases/download/v0.60.0/kapp-linux-amd64 -o kapp
        chmod a+rx kapp
        mv kapp /usr/local/bin/

        # helm
        snap install helm --classic

        # pinniped
        wget --progress=dot:giga https://get.pinniped.dev/v0.28.0/pinniped-cli-linux-amd64
        mv pinniped-cli-linux-amd64 /usr/local/bin/pinniped
        chmod a+rx /usr/local/bin/pinniped

        curl -fSsL 'https://dl.cloudsmith.io/public/caddy/stable/gpg.key' | sudo gpg --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg
        curl -fSsL 'https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt' | sudo tee /etc/apt/sources.list.d/caddy-stable.list
        apt-get update
        mkdir -p /etc/caddy
        cat > /etc/caddy/Caddyfile << EOF
{
        skip_install_trust
        ocsp_stapling off
        https_port 8443
}

$(hostname).home.arpa:8443 {
        tls {
                # must be on port 443, which is taken by step online CA
                # http challenge must be on port 80, which is free
                issuer acme https://step.home.arpa/acme/acme/directory {
                        email caddy@step.home.arpa
                        disable_tlsalpn_challenge
                        trusted_roots /etc/ssl/certs/ca-certificates.crt
                }
        }
        root * /usr/share/caddy
        file_server
}
EOF
        apt-get install -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" --force-yes caddy
        rm /usr/share/caddy/index.html

else
	/root/joincmd
fi

echo done k8s setup