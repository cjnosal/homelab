#@ load("@ytt:data", "data")
#@ load("@ytt:overlay", "overlay")
#@overlay/match by=overlay.all,expects="0+"
#@overlay/match-child-defaults missing_ok=True
---
write_files:
- path: /run/keycloak.conf
  owner: root:root
  permissions: '0600'
  #@yaml/text-templated-strings
  content: |
    # Basic settings for running in production. Change accordingly before deploying the server.

    # Database

    # The database vendor.
    db=postgres

    # The username of the database user.
    db-username=keycloak

    # The password of the database user.
    db-password=(@= data.values.placeholdercred @)

    # The full database JDBC URL. If not provided, a default URL is set based on the selected database vendor.
    db-url=jdbc:postgresql://localhost/keycloak

    # Observability

    # If the server should expose healthcheck endpoints.
    health-enabled=true

    # If the server should expose metrics endpoints.
    metrics-enabled=true

    # HTTP

    # The file path to a server certificate or certificate chain in PEM format.
    https-certificate-file=${kc.home.dir}/conf/server.crt.pem

    # The file path to a private key in PEM format.
    https-certificate-key-file=${kc.home.dir}/conf/server.key.pem

    # The proxy address forwarding mode if the server is behind a reverse proxy.
    #proxy=reencrypt

    # Do not attach route to cookies and rely on the session affinity capabilities from reverse proxy
    #spi-sticky-session-encoder-infinispan-should-attach-route=false

    # Hostname for the Keycloak server.
    hostname=(@= data.values.hostname @).(@= data.values.zone @)
- path: /etc/systemd/system/keycloak.service
  owner: root:root
  permissions: '0600'
  #@yaml/text-templated-strings
  content: |
    [Unit]
    Description=Keycloak Server
    After=network.target
    Wants=network.target

    [Service]
    Type=notify
    NotifyAccess=all
    Environment=KEYCLOAK_ADMIN=admin
    Environment=KEYCLOAK_ADMIN_PASSWORD=(@= data.values.placeholdercred @)
    ExecStart=/opt/keycloak/bin/kc.sh start --optimized --log=console,file --log-file=/var/log/keycloak/keycloak.log
    SuccessExitStatus=0 143

    [Install]
    WantedBy=multi-user.target
- path: /usr/local/bin/create-realm
  owner: root:root
  permissions: '0755'
  #@yaml/text-templated-strings
  content: |
    #!/usr/bin/env bash
    set -euo pipefail

    cd /opt/keycloak/bin

    ADMIN_USER=$1
    ADMIN_PASSWORD=$2
    REALM=$3

    ./kcadm.sh config credentials --server https://(@= data.values.hostname @).(@= data.values.zone @):8443 --realm master --user $ADMIN_USER --password $ADMIN_PASSWORD
    ./kcadm.sh create realms -s enabled=true -s realm=${REALM}

    REALM_ID=$(./kcadm.sh get realms/${REALM} --fields id | jq -r .id)
    LDAP_ID=$(./kcadm.sh create components -r ${REALM} \
        -s name="ldap" \
        -s parentId=$REALM_ID \
        -s providerId=ldap \
        -s providerType=org.keycloak.storage.UserStorageProvider \
        -s 'config.editMode=["READ_ONLY"]' \
        -s 'config.usernameLDAPAttribute=["uid"]' \
        -s 'config.uuidLDAPAttribute=["entryUUID"]' \
        -s 'config.userObjectClasses=["inetOrgPerson"]' \
        -s 'config.connectionUrl=["ldaps://ldap.(@= data.values.zone @)"]' \
        -s 'config.usersDn=["ou=People,dc=home,dc=arpa"]' \
        -s 'config.enabled=["true"]' \
        -s 'config.authType=["none"]' \
        -i)

    ./kcadm.sh create components -r ${REALM} \
        -s name="group-ldap-mapper" \
        -s parentId=$LDAP_ID \
        -s providerId=group-ldap-mapper \
        -s providerType=org.keycloak.storage.ldap.mappers.LDAPStorageMapper \
        -s 'config."groups.dn"=[ "ou=Groups,dc=home,dc=arpa" ]' \
        -s 'config.mode=[ "READ_ONLY" ]' \
        -s 'config."user.roles.retrieve.strategy"=[ "LOAD_GROUPS_BY_MEMBER_ATTRIBUTE" ]' \
        -s 'config."membership.ldap.attribute"=[ "member" ]' \
        -s 'config."group.object.classes"=[ "groupOfNames" ]' \
        -i
- path: /usr/local/bin/create-client
  owner: root:root
  permissions: '0755'
  #@yaml/text-templated-strings
  content: |
    #!/usr/bin/env bash
    set -euo pipefail

    # set client fields with `-s key=val` - see /opt/keycloak/bin/kcadm.sh create clients --help
    # mapper "ldap-groups" automatically added to include LDAP groups in the "groups" token claim
    # prints client secret

    ADMIN_USER=$1
    shift
    ADMIN_PASSWORD=$1
    shift
    REALM=$1
    shift

    /opt/keycloak/bin/kcadm.sh config credentials --server https://(@= data.values.hostname @).(@= data.values.zone @):8443 --realm master --user $ADMIN_USER --password $ADMIN_PASSWORD
    CID=$(/opt/keycloak/bin/kcadm.sh create clients -r ${REALM} -i $@ )

    /opt/keycloak/bin/kcadm.sh create clients/${CID}/protocol-mappers/models -r ${REALM} \
     -s name=ldap-groups \
     -s protocol=openid-connect \
     -s protocolMapper=oidc-group-membership-mapper \
     -s 'config."claim.name"=groups' \
     -s 'config."full.path"=false' \
     -s 'config."multivalued"=true' \
     -s 'config."id.token.claim"=true' \
     -s 'config."userinfo.token.claim"=true' \
     -s 'config."access.token.claim"=true'

    /opt/keycloak/bin/kcadm.sh get clients/$CID -r ${REALM} --fields=secret | jq -r '.secret'
packages:
- openjdk-19-jre-headless
- postgresql
- postgresql-client
- postgresql-contrib
- jq
runcmd:
- wget --progress=dot:giga https://github.com/keycloak/keycloak/releases/download/22.0.0/keycloak-22.0.0.tar.gz
- tar -xf keycloak-22.0.0.tar.gz
- addgroup keycloak
- adduser --system keycloak
- adduser keycloak keycloak
- mv keycloak-22.0.0 /opt/keycloak
- rm keycloak-22.0.0.tar.gz
- mv /run/keycloak.conf /opt/keycloak/conf/keycloak.conf
- chown -R keycloak /opt/keycloak
- wget --progress=dot:giga https://repo1.maven.org/maven2/io/quarkiverse/systemd/notify/quarkus-systemd-notify-deployment/1.0.1/quarkus-systemd-notify-deployment-1.0.1.jar -O /opt/keycloak/providers/quarkus-systemd-notify-deployment-1.0.1.jar
- wget --progress=dot:giga https://repo1.maven.org/maven2/io/quarkiverse/systemd/notify/quarkus-systemd-notify/1.0.1/quarkus-systemd-notify-1.0.1.jar -O /opt/keycloak/providers/quarkus-systemd-notify-1.0.1.jar
- systemctl start postgresql.service
- sudo -u postgres createuser keycloak
- sudo -u postgres createdb keycloak
#@yaml/text-templated-strings
- sudo -u postgres psql -c "ALTER USER keycloak PASSWORD '(@= data.values.placeholdercred @)';"
- /opt/keycloak/bin/kc.sh build --db=postgres
- snap install --classic certbot
- ln -s /snap/bin/certbot /usr/bin/certbot
- export REQUESTS_CA_BUNDLE=/etc/ssl/certs/ca-certificates.crt
- echo "REQUESTS_CA_BUNDLE=/etc/ssl/certs/ca-certificates.crt" | sudoappend /etc/environment
#@yaml/text-templated-strings
- certbot certonly --standalone --server (@= data.values.acme @) --register-unsafely-without-email --cert-name (@= data.values.hostname @).(@= data.values.zone @) -d (@= data.values.hostname @).(@= data.values.zone @) 
#@yaml/text-templated-strings
- ln -s /etc/letsencrypt/live/(@= data.values.hostname @).(@= data.values.zone @)/fullchain.pem /opt/keycloak/conf/server.crt.pem
#@yaml/text-templated-strings
- ln -s /etc/letsencrypt/live/(@= data.values.hostname @).(@= data.values.zone @)/privkey.pem /opt/keycloak/conf/server.key.pem 
- chgrp -R keycloak /etc/letsencrypt
- chmod g+rx /etc/letsencrypt/archive
#@yaml/text-templated-strings
- chmod g+rx /etc/letsencrypt/archive/(@= data.values.hostname @).(@= data.values.zone @)
- chmod g+rx /etc/letsencrypt/live
#@yaml/text-templated-strings
- chmod g+rx /etc/letsencrypt/live/(@= data.values.hostname @).(@= data.values.zone @)
- chmod 640 /opt/keycloak/conf/*.pem
- systemctl daemon-reload
- systemctl enable keycloak
- systemctl start keycloak