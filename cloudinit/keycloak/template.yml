#@ load("@ytt:data", "data")
#@ load("@ytt:overlay", "overlay")
#@overlay/match by=overlay.all,expects="0+"
#@overlay/match-child-defaults missing_ok=True
---
write_files:
- path: /run/keycloak.conf
  owner: root:root
  permissions: '0600'
  #@yaml/text-templated-strings
  content: |
    # Basic settings for running in production. Change accordingly before deploying the server.

    # Database

    # The database vendor.
    db=postgres

    # The username of the database user.
    db-username=keycloak

    # The password of the database user.
    db-password=

    # The full database JDBC URL. If not provided, a default URL is set based on the selected database vendor.
    db-url=jdbc:postgresql://localhost/keycloak

    # Observability

    # If the server should expose healthcheck endpoints.
    health-enabled=true

    # If the server should expose metrics endpoints.
    metrics-enabled=true

    # HTTP

    # The file path to a server certificate or certificate chain in PEM format.
    https-certificate-file=${kc.home.dir}/conf/server.crt.pem

    # The file path to a private key in PEM format.
    https-certificate-key-file=${kc.home.dir}/conf/server.key.pem

    # The proxy address forwarding mode if the server is behind a reverse proxy.
    #proxy=reencrypt

    # Do not attach route to cookies and rely on the session affinity capabilities from reverse proxy
    #spi-sticky-session-encoder-infinispan-should-attach-route=false

    # Hostname for the Keycloak server.
    hostname=(@= data.values.hostname @).(@= data.values.zone @)
- path: /etc/systemd/system/keycloak.service
  owner: root:root
  permissions: '0600'
  #@yaml/text-templated-strings
  content: |
    [Unit]
    Description=Keycloak Server
    After=network.target
    Wants=network.target

    [Service]
    Type=notify
    NotifyAccess=all
    Environment=KEYCLOAK_ADMIN=admin
    Environment=KEYCLOAK_ADMIN_PASSWORD=(@= data.values.placeholderadmincred @)
    ExecStart=/opt/keycloak/bin/kc.sh start --optimized --log=console,file --log-file=/var/log/keycloak/keycloak.log
    SuccessExitStatus=0 143

    [Install]
    WantedBy=multi-user.target
- path: /usr/local/bin/create-realm
  owner: root:root
  permissions: '0755'
  #@yaml/text-templated-strings
  content: |
    #!/usr/bin/env bash
    set -euo pipefail

    cd /opt/keycloak/bin

    OPTIONS=(username password authrealm realm)

    help_this="create a realm with ldap federation"

    help_username="keycloak admin"
    help_password="keycloak admin's password"
    help_authrealm="realm the keycloak admin belongs to"
    help_realm="realm to create"

    authrealm=${authrealm:-master}
    realm=${realm:-infrastructure}

    source /usr/local/include/argshelper

    parseargs $@
    requireargs authrealm realm

    if [[ -z "$username" ]]
    then
      echo keycloak username:
      read username
    fi

    if [[ -z "$password" ]]
    then
      echo password:
      read -s password
    fi

    ./kcadm.sh config credentials --server https://(@= data.values.hostname @).(@= data.values.zone @):8443 --realm $authrealm --user $username --password $password
    ./kcadm.sh create realms -s enabled=true -s realm=${realm}

    REALM_ID=$(./kcadm.sh get realms/${realm} --fields id | jq -r .id)
    LDAP_ID=$(./kcadm.sh create components -r ${realm} \
        -s name="ldap" \
        -s parentId=$REALM_ID \
        -s providerId=ldap \
        -s providerType=org.keycloak.storage.UserStorageProvider \
        -s 'config.editMode=["READ_ONLY"]' \
        -s 'config.usernameLDAPAttribute=["uid"]' \
        -s 'config.uuidLDAPAttribute=["entryUUID"]' \
        -s 'config.userObjectClasses=["inetOrgPerson"]' \
        -s 'config.connectionUrl=["ldaps://ldap.(@= data.values.zone @)"]' \
        -s 'config.usersDn=["ou=People,dc=home,dc=arpa"]' \
        -s 'config.enabled=["true"]' \
        -s 'config.authType=["none"]' \
        -i)

    ./kcadm.sh create components -r ${realm} \
        -s name="group-ldap-mapper" \
        -s parentId=$LDAP_ID \
        -s providerId=group-ldap-mapper \
        -s providerType=org.keycloak.storage.ldap.mappers.LDAPStorageMapper \
        -s 'config."groups.dn"=[ "ou=Groups,dc=home,dc=arpa" ]' \
        -s 'config.mode=[ "READ_ONLY" ]' \
        -s 'config."user.roles.retrieve.strategy"=[ "LOAD_GROUPS_BY_MEMBER_ATTRIBUTE" ]' \
        -s 'config."membership.ldap.attribute"=[ "member" ]' \
        -s 'config."group.object.classes"=[ "groupOfNames" ]' \
        -i
- path: /usr/local/bin/create-client
  owner: root:root
  permissions: '0755'
  #@yaml/text-templated-strings
  content: |
    #!/usr/bin/env bash
    set -euo pipefail

    # set client fields with `-s key=val` - see /opt/keycloak/bin/kcadm.sh create clients --help
    # mapper "ldap-groups" automatically added to include LDAP groups in the "groups" token claim
    # prints client secret

    OPTIONS=(username password authrealm realm)

    help_this="create a new oidc client with access to ldap groups, returning the client secret.
      args following '--' are passed to \`kcadm.sh create\`"

    help_username="keycloak admin"
    help_password="keycloak admin's password"
    help_authrealm="realm the keycloak admin belongs to"
    help_realm="client realm"

    authrealm=${authrealm:-infrastructure}
    realm=${realm:-infrastructure}

    source /usr/local/include/argshelper

    parseargs $@
    requireargs authrealm realm

    if [[ -z "$username" ]]
    then
      echo keycloak username:
      read username
    fi

    if [[ -z "$password" ]]
    then
      echo password:
      read -s password
    fi

    /opt/keycloak/bin/kcadm.sh config credentials --server https://(@= data.values.hostname @).(@= data.values.zone @):8443 --realm $authrealm --user $username --password $password
    CID=$(/opt/keycloak/bin/kcadm.sh create clients -r ${realm} -i ${PASSTHROUGH[@]} )

    /opt/keycloak/bin/kcadm.sh create clients/${CID}/protocol-mappers/models -r ${realm} \
     -s name=ldap-groups \
     -s protocol=openid-connect \
     -s protocolMapper=oidc-group-membership-mapper \
     -s 'config."claim.name"=groups' \
     -s 'config."full.path"=false' \
     -s 'config."multivalued"=true' \
     -s 'config."id.token.claim"=true' \
     -s 'config."userinfo.token.claim"=true' \
     -s 'config."access.token.claim"=true'

    /opt/keycloak/bin/kcadm.sh get clients/$CID -r ${realm} --fields=secret | jq -r '.secret'
- path: /usr/local/bin/sync-realm
  owner: root:root
  permissions: '0755'
  #@yaml/text-templated-strings
  content: |
    #!/usr/bin/env bash
    set -euo pipefail

    OPTIONS=(username password authrealm realm)

    help_this="sync LDAP attributes to keycloak"

    help_username="keycloak admin"
    help_password="keycloak admin's password"
    help_authrealm="realm the keycloak admin belongs to"
    help_realm="realm to sync"

    authrealm=${authrealm:-infrastructure}
    realm=${realm:-infrastructure}

    source /usr/local/include/argshelper

    parseargs $@
    requireargs authrealm realm

    if [[ -z "$username" ]]
    then
      echo keycloak username:
      read username
    fi

    if [[ -z "$password" ]]
    then
      echo password:
      read -s password
    fi

    /opt/keycloak/bin/kcadm.sh config credentials --server https://keycloak.home.arpa:8443 --realm $authrealm --user $username --password $password

    LDAP_ID=$(/opt/keycloak/bin/kcadm.sh get components -q name=ldap -r $realm | jq -r '.[0].id')
    /opt/keycloak/bin/kcadm.sh create user-storage/${LDAP_ID}/sync?action=triggerFullSync -r $realm
- path: /root/runcmd
  owner: root:root
  permissions: '0750'
  #@yaml/text-templated-strings
  content: #@ data.values.runcmd
packages:
- openjdk-19-jre-headless
- postgresql
- postgresql-client
- postgresql-contrib
- jq
runcmd:
#@yaml/text-templated-strings
- /root/runcmd (@= data.values.placeholderadmincred @)