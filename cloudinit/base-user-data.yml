#@ load("@ytt:data", "data")
---
hostname: #@ data.values.hostname
manage_etc_hosts: true
users:
- name: ubuntu
  homedir: /home/ubuntu
  shell: /bin/bash
  lock_passwd: True
  gecos: Ubuntu
  groups: [adm, cdrom, dip, lxd, sudo]
  ssh_authorized_keys:
  #@ lines = data.values.ssh_authorized_keys.splitlines()
  #@ for key in range(len(lines)):
  - #@ lines[key]
  #@ end
  sudo: ALL=(ALL) NOPASSWD:ALL
- name: ops
  homedir: /home/ops
  shell: /bin/bash
  lock_passwd: True
  gecos: Ops Team
  sudo: ALL=(ALL) NOPASSWD:ALL
ssh_authorized_keys:
#@ lines = data.values.ssh_authorized_keys.splitlines()
#@ for key in range(len(lines)):
- #@ lines[key]
#@ end
chpasswd:
  expire: False
#@ if hasattr(data.values, "step_root_ca") and hasattr(data.values, "step_intermediate_ca"):
ca_certs:
  trusted:
    - #@ data.values.step_root_ca
    - #@ data.values.step_intermediate_ca
#@ end
package_upgrade: false #! systemctl dbus errors
packages:
- jq
write_files:
- path: /usr/local/bin/sudoappend
  owner: root:root
  permissions: '0755'
  content: |
    #!/usr/bin/env bash
    set -euo pipefail
    export EDITOR=/bin/ed
    echo "a
    $(cat -)
    .
    w
    q" | sudoedit $1
- path: /usr/local/bin/sudoreplace
  owner: root:root
  permissions: '0755'
  content: |
    #!/usr/bin/env bash
    set -euo pipefail
    export EDITOR="/bin/ed -E"
    echo "1,\$$(cat -)
    w
    q" | sudoedit $1
#! role id can be inserted into the template disk instead of inserted by cloudinit
#@ if hasattr(data.values, "ssh_host_role_id"):
- path: /etc/ssh_host_role_id
  owner: root:root
  permissions: '0640'
  content: #@ data.values.ssh_host_role_id
#@ end
#@ if hasattr(data.values, "vault_host_ssh_ca") and hasattr(data.values, "vault_client_ssh_ca"):
- path: /etc/ssh/trusted-user-ca-keys.pem
  owner: root:root
  permissions: '0640'
  content: #@ data.values.vault_client_ssh_ca
- path: /etc/ssh/ssh_known_hosts
  owner: root:root
  permissions: '0644'
  content: #@ "@cert-authority *.home.arpa {}".format(data.values.vault_host_ssh_ca)
- path: /etc/ssh/sshd_config.d/home.arpa.conf
  owner: root:root
  permissions: '0640'
  content: |
    TrustedUserCAKeys /etc/ssh/trusted-user-ca-keys.pem
    HostCertificate /etc/ssh/ssh_host_rsa_key-cert.pub
#@ end
- path: /usr/local/bin/getsshclientca
  owner: root:root
  permissions: '0750'
  content: |
    #!/usr/bin/env bash
    set -euo pipefail
    if ! curl -fSsL https://vault.home.arpa:8200/v1/sys/health
    then
      echo "vault not available, skip fetching client ca"
      exit 0
    fi
    curl -fSsL -o /etc/ssh/trusted-user-ca-keys.pem https://vault.home.arpa:8200/v1/ssh-client-signer/public_key
- path: /usr/local/bin/getsshserverca
  owner: root:root
  permissions: '0750'
  content: |
    #!/usr/bin/env bash
    set -euo pipefail
    if ! curl -fSsL https://vault.home.arpa:8200/v1/sys/health
    then
      echo "vault not available, skip fetching server ca"
      exit 0
    fi
    PEM=$(curl -fSsL https://vault.home.arpa:8200/v1/ssh-host-signer/public_key)
    echo "@cert-authority *.home.arpa $PEM" > /etc/ssh/ssh_known_hosts
    chmod a+r /etc/ssh/ssh_known_hosts
- path: /usr/local/bin/getsshcert
  owner: root:root
  permissions: '0750'
  content: |
    #!/usr/bin/env bash
    set -euo pipefail
    if [[ ! -f /etc/ssh_host_role_id ]]
    then
      echo "vault role id for ssh host cert signing role not present, skipping cert generation"
      exit 0
    fi
    if ! curl -fSsL https://vault.home.arpa:8200/v1/sys/health
    then
      echo "vault not available, skipping cert generation"
    fi
    ROLE_ID=$(cat /etc/ssh_host_role_id)
    PUB_KEY="$(cat /etc/ssh/ssh_host_rsa_key.pub)"
    VAULT_TOKEN=$(curl -fSsL https://vault.home.arpa:8200/v1/auth/approle/login --data "{\"role_id\":\"$ROLE_ID\"}" | jq -r .auth.client_token)
    curl -fSsL -X POST https://vault.home.arpa:8200/v1/ssh-host-signer/sign/hostrole -H"X-Vault-Token: $VAULT_TOKEN" \
      --data "{\"public_key\":\"$PUB_KEY\",\"cert_type\":\"host\"}" | jq -r .data.signed_key > /etc/ssh/ssh_host_rsa_key-cert.pub
    rm -f /etc/ssh_host_role_id
- path: /usr/local/bin/gettlsca
  owner: root:root
  permissions: '0750'
  content: |
    #!/usr/bin/env bash
    set -euo pipefail
    sudo curl -kfSsL -o /usr/local/share/ca-certificates/step_root_ca.crt https://step.home.arpa:8443/step_root_ca.crt
    sudo curl -kfSsL -o /usr/local/share/ca-certificates/step_intermediate_ca.crt https://step.home.arpa:8443/step_intermediate_ca.crt

    sudo chmod -R a+r /usr/local/share/ca-certificates/*.crt
    sudo update-ca-certificates
- path: /usr/local/bin/initcertbot
  owner: root:root
  permissions: '0750'
  content: |
    #!/usr/bin/env bash
    set -euo pipefail

    ACME=https://step.home.arpa/acme/acme/directory
    SAN=$1

    snap install --classic certbot
    ln -s /snap/bin/certbot /usr/bin/certbot
    export REQUESTS_CA_BUNDLE=/etc/ssl/certs/ca-certificates.crt
    echo "REQUESTS_CA_BUNDLE=/etc/ssl/certs/ca-certificates.crt" | sudoappend /etc/environment
    certbot certonly --standalone --server $ACME --register-unsafely-without-email --cert-name ${SAN} -d ${SAN}
    chmod g+rx /etc/letsencrypt/archive
    chmod g+rx /etc/letsencrypt/archive/${SAN}
    chmod g+rx /etc/letsencrypt/live
    chmod g+rx /etc/letsencrypt/live/${SAN}
    if [[ -n "${FULLCHAIN_PATH:-}" ]]
    then
      mkdir -p $(dirname $FULLCHAIN_PATH)
      rm -rf $FULLCHAIN_PATH
      ln -s /etc/letsencrypt/live/${SAN}/fullchain.pem $FULLCHAIN_PATH
      chmod 640 $FULLCHAIN_PATH
    fi
    if [[ -n "${CHAIN_PATH:-}" ]]
    then
      mkdir -p $(dirname $CHAIN_PATH)
      rm -rf $CHAIN_PATH
      ln -s /etc/letsencrypt/live/${SAN}/chain.pem $CHAIN_PATH
      chmod 640 $CHAIN_PATH
    fi
    if [[ -n "${CERT_PATH:-}" ]]
    then
      mkdir -p $(dirname $CERT_PATH)
      rm -rf $CERT_PATH
      ln -s /etc/letsencrypt/live/${SAN}/cert.pem $CERT_PATH
      chmod 640 $CERT_PATH
    fi
    if [[ -n "${PRIVKEY_PATH:-}" ]]
    then
      mkdir -p $(dirname $PRIVKEY_PATH)
      rm -rf $PRIVKEY_PATH
      ln -s /etc/letsencrypt/live/${SAN}/privkey.pem $PRIVKEY_PATH
      chmod 640 $PRIVKEY_PATH
    fi
    chgrp -R $CERT_GROUP /etc/letsencrypt
    chgrp -R $CERT_GROUP /etc/letsencrypt/archive/${SAN}/
runcmd:
- /usr/local/bin/getsshcert
- /usr/local/bin/getsshclientca
- /usr/local/bin/getsshserverca