#!/usr/bin/env bash
set -euo pipefail

SCRIPT_DIR=$(cd $(dirname $0) && pwd)

# create a new vm from the provided template

# defaults
memory=${memory:-4096}
cores=${cores:-2}
nameserver=${nameserver:-$(dig -4 +noall +answer bind.home.arpa | awk '{print $5}')}
template_name=${template_name:-"jammy-cloudinit-4g"}

OPTIONS=(template_name vmname userdata memory cores disk nameserver ip)

help_this="create a new vm"
help_template_name="name of the VM template to clone (default jammy-cloudinit-4g)"
help_vmname="unique name for the new VM"
help_userdata="filename of the cloudinit user data configuration in the proxmox snippets directory"
help_memory="RAM to allocate in MB (default 4096)"
help_cores="CPU cores to allocate (default 2)"
help_disk="boot disk size in GB (default matches template)"
help_nameserver="IP address of DNS resolver (default bind.home.arpa)"
help_ip="IP address of new VM (default will reuse address of {vmname}.home.arpa if present in DNS, otherwise increment available IP)"

source ${SCRIPT_DIR}/../cloudinit/argshelper

parseargs $@
requireargs template_name vmname


TEMPLATE_ID=$($SCRIPT_DIR/findvm $template_name)
VMID=$($SCRIPT_DIR/ids next)

if [[ -z "$ip" ]]
then
	DNS=$(dig -4 ${vmname}.home.arpa +noall +answer)
	if [[ -n "$DNS" ]]
	then
		ip=$(awk '{print $5}' <<< "$DNS") # reuse ip when recreating a VM
	else
		ip=$($SCRIPT_DIR/ips next) # find available IP address for new VM
	fi
fi

qm clone $TEMPLATE_ID $VMID --name $vmname
qm set $VMID --ipconfig0 ip=${ip}/23,gw=192.168.3.1

qm set $VMID --cpu host
qm set $VMID --cores $cores
qm set $VMID --memory $memory

qm set $VMID --searchdomain home.arpa
qm set $VMID --nameserver ${nameserver}

if [[ -n "$userdata" ]]
then
    qm set $VMID --cicustom "user=local:snippets/${userdata}" # use provided cloudinit config
else
	qm set $VMID --sshkey /root/.ssh/vm.pub # always add default ssh key
fi

if [[ -n "$disk" ]]
then
	qm disk resize $VMID scsi0 ${disk}G
fi

qm start $VMID

ssh-keygen -f ~/.ssh/known_hosts -R $ip
ssh-keygen -f ~/.ssh/known_hosts -R ${vmname}.home.arpa

while ! ssh-keyscan -H $ip >> ~/.ssh/known_hosts
do
  echo waiting for ssh
  sleep 2
done

ssh -i /root/.ssh/vm ubuntu@${ip} tail -f /var/log/cloud-init-output.log &
RESULT=0
if ! ssh -i /root/.ssh/vm ubuntu@${ip} cloud-init status --wait > /dev/null
then
  echo "cloudinit failed"
  RESULT=1
fi
kill $(jobs -p)
exit $RESULT